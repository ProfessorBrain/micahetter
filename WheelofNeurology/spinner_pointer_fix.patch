*** a/index.html
--- b/index.html
@@
 <script>
-// (existing vars)
+// (existing vars)
+const TWO_PI = Math.PI * 2;
+let sliceAngle = 0; // set after wheelWedges are defined/changed
@@
-// wherever your wheel wedges are defined/updated
-// const wheelWedges = [...];
+// wherever your wheel wedges are defined/updated
+// const wheelWedges = [...];
+function _updateSliceAngle() {
+  if (Array.isArray(wheelWedges) && wheelWedges.length > 0) {
+    sliceAngle = TWO_PI / wheelWedges.length;
+  }
+}
+// call once at startup and any time wedges change
+_updateSliceAngle();
@@
-// (existing helpers)
+// (existing helpers)
+function norm(a) {
+  a = a % TWO_PI;
+  if (a < 0) a += TWO_PI;
+  return a;
+}
+
+/**
+ * Return the wedge index that sits under the fixed pointer.
+ * Pointer assumed at top (12 o'clock) => pointer angle in world coords = -Math.PI/2.
+ * If your pointer is elsewhere, change the OFFSET below accordingly.
+ */
+function wedgeAtPointer(rot = 0) {
+  const POINTER_OFFSET = -Math.PI / 2; // <â€” change if your pointer graphic is not at the top
+  // Convert world rotation to wheel-local pointer angle, then to wedge index
+  const local = norm(POINTER_OFFSET - rot);
+  if (!sliceAngle) _updateSliceAngle();
+  const idx = Math.floor(local / sliceAngle);
+  return ((idx % wheelWedges.length) + wheelWedges.length) % wheelWedges.length;
+}
@@
-// during spin animation / preview (frame loop)
-// old code (examples seen in many builds):
-// const idx = Math.floor(norm(rot) / sliceAngle);  // or used +Math.PI/2 / bottom/right pointer
-// drawPreview(idx);
+// during spin animation / preview (frame loop)
+// use the pointer-based wedge detection so the preview matches the final result
+const idx = wedgeAtPointer(rot);
+drawPreview(idx);
@@
-function onSpinComplete() {
-  // old landing logic (commonly used bottom/right reference)
-  // const idx = Math.floor(norm(state.rotation + Math.PI/2) / sliceAngle) % wheelWedges.length;
-  // const w = wheelWedges[idx];
+function onSpinComplete() {
+  // Landed wedge: the one under the fixed pointer at the final rotation
+  const idx = wedgeAtPointer(state.rotation || 0);
+  const w = wheelWedges[idx];
   // ... rest of your existing logic using `w`
 }
@@
-// If you rebuild wedges dynamically elsewhere, remember to keep sliceAngle in sync
-// (previous code might not have done this)
+// If you rebuild wedges dynamically elsewhere, keep sliceAngle in sync:
+// wheelWedges = makeWedges(...);
+// _updateSliceAngle();
 </script>
